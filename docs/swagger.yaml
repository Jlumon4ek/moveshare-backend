basePath: /api
definitions:
  auth.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  auth.ChangePasswordResponse:
    properties:
      message:
        type: string
    type: object
  chat.CreateChatRequest:
    properties:
      job_id:
        example: 123
        type: integer
      participant_id:
        example: 456
        type: integer
    required:
    - job_id
    - participant_id
    type: object
  chat.CreateChatResponse:
    properties:
      chat_id:
        type: integer
      message:
        type: string
      success:
        type: boolean
    type: object
  chat.SendMessageRequest:
    properties:
      message_text:
        example: Привет! Интересует ваше предложение.
        type: string
      message_type:
        example: text
        type: string
    required:
    - message_text
    type: object
  chat.SendMessageResponse:
    properties:
      message:
        $ref: '#/definitions/models.ChatMessageResponse'
      success:
        type: boolean
    type: object
  dto.CompanyResponse:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: Los Angeles
        type: string
      company_description:
        example: A brief description of the company
        type: string
      company_name:
        example: Example Company
        type: string
      contact_person:
        example: John Doe
        type: string
      dot_number:
        example: DOT1234567
        type: string
      email_address:
        example: example@company.com
        type: string
      mc_license_number:
        example: "123456"
        type: string
      phone_number:
        example: (123) 456-7890
        type: string
      state:
        example: CA
        type: string
      zip_code:
        example: "90001"
        type: string
    type: object
  dto.UpdateCompanyRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: Los Angeles
        type: string
      company_description:
        example: A short description
        type: string
      company_name:
        example: Example Company
        type: string
      contact_person:
        example: John Doe
        type: string
      dot_number:
        example: DOT1234567
        type: string
      mc_license_number:
        example: "123456"
        type: string
      phone_number:
        example: (123) 456-7890
        type: string
      state:
        example: CA
        type: string
      zip_code:
        example: "90001"
        type: string
    type: object
  models.ActiveSessionsResponse:
    properties:
      count:
        type: integer
      sessions:
        items:
          $ref: '#/definitions/models.UserSessionResponse'
        type: array
    type: object
  models.AddCardRequest:
    properties:
      payment_method_id:
        example: pm_1234567890
        type: string
    required:
    - payment_method_id
    type: object
  models.AddCardResponse:
    properties:
      message:
        type: string
      payment_method:
        $ref: '#/definitions/models.PaymentMethodResponse'
      success:
        type: boolean
    type: object
  models.BusyRoute:
    properties:
      delivery_address:
        type: string
      jobs_count:
        type: integer
      pickup_address:
        type: string
      route:
        type: string
    type: object
  models.CancelJobsRequest:
    properties:
      job_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - job_ids
    type: object
  models.ChatMessageResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_from_me:
        type: boolean
      is_read:
        type: boolean
      message_text:
        type: string
      message_type:
        type: string
      read_at:
        type: string
      sender_id:
        type: integer
      sender_name:
        type: string
      updated_at:
        type: string
    type: object
  models.CityWithState:
    properties:
      id:
        type: integer
      name:
        type: string
      state_id:
        type: integer
      state_name:
        type: string
    type: object
  models.Company:
    properties:
      address:
        type: string
      city:
        type: string
      company_description:
        type: string
      company_name:
        type: string
      contact_person:
        type: string
      created_at:
        type: string
      dot_number:
        type: string
      email_address:
        type: string
      id:
        type: integer
      mc_license_number:
        type: string
      phone_number:
        type: string
      state:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      zip_code:
        type: string
    type: object
  models.ConfirmPaymentRequest:
    properties:
      payment_intent_id:
        example: pi_1234567890
        type: string
    required:
    - payment_intent_id
    type: object
  models.ConfirmPaymentResponse:
    properties:
      message:
        type: string
      payment_id:
        type: integer
      status:
        type: string
      success:
        type: boolean
    type: object
  models.CreateJobWithPaymentRequest:
    properties:
      additional_services_description:
        type: string
      bulky_items:
        type: boolean
      cut_amount:
        type: number
      delivery_address:
        type: string
      delivery_building_type:
        type: string
      delivery_city:
        type: string
      delivery_date:
        type: string
      delivery_floor:
        type: integer
      delivery_state:
        type: string
      delivery_time_from:
        type: string
      delivery_time_to:
        type: string
      delivery_walk_distance:
        type: string
      distance_miles:
        type: number
      estimated_crew_assistants:
        type: string
      hoisting:
        type: boolean
      inventory_list:
        type: boolean
      job_type:
        description: Job details
        type: string
      number_of_bedrooms:
        type: string
      packing_boxes:
        type: boolean
      payment_amount:
        type: number
      payment_method_id:
        description: Payment information
        type: integer
      pickup_address:
        type: string
      pickup_building_type:
        type: string
      pickup_city:
        type: string
      pickup_date:
        type: string
      pickup_floor:
        type: integer
      pickup_state:
        type: string
      pickup_time_from:
        type: string
      pickup_time_to:
        type: string
      pickup_walk_distance:
        type: string
      truck_size:
        type: string
      volume_cu_ft:
        type: number
      weight_lbs:
        type: number
    required:
    - delivery_address
    - delivery_city
    - delivery_date
    - delivery_state
    - delivery_time_from
    - delivery_time_to
    - job_type
    - payment_amount
    - pickup_address
    - pickup_city
    - pickup_date
    - pickup_state
    - pickup_time_from
    - pickup_time_to
    - truck_size
    type: object
  models.CreatePaymentRequest:
    properties:
      amount_cents:
        description: $29.99
        example: 2999
        type: integer
      description:
        example: Payment for job posting
        type: string
      job_id:
        description: Опционально для отдельных платежей
        example: 123
        type: integer
      payment_method_id:
        description: Опционально, если не указано - берем default
        example: 456
        type: integer
    required:
    - amount_cents
    type: object
  models.CreatePaymentResponse:
    properties:
      client_secret:
        type: string
      payment_intent_id:
        type: string
      requires_confirmation:
        type: boolean
      status:
        type: string
      success:
        type: boolean
    type: object
  models.CreateReviewRequest:
    properties:
      comment:
        type: string
      job_id:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - job_id
    - rating
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Invalid request
        type: string
    type: object
  models.ExportJobsRequest:
    properties:
      job_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - job_ids
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.ForgotPasswordResponse:
    properties:
      message:
        type: string
    type: object
  models.Job:
    properties:
      additional_services_description:
        type: string
      bulky_items:
        type: boolean
      contractor_id:
        type: integer
      contractor_rating:
        type: number
      contractor_status:
        type: string
      contractor_username:
        description: Contractor info (only for detailed job view)
        type: string
      created_at:
        description: Timestamps
        type: string
      cut_amount:
        description: Payment
        type: number
      delivery_address:
        description: Delivery location
        type: string
      delivery_building_type:
        type: string
      delivery_city:
        type: string
      delivery_date:
        type: string
      delivery_floor:
        type: integer
      delivery_state:
        type: string
      delivery_time_from:
        type: string
      delivery_time_to:
        type: string
      delivery_walk_distance:
        type: string
      distance_miles:
        description: Job info
        type: number
      estimated_crew_assistants:
        description: Crew and truck
        type: string
      executor_id:
        type: integer
      executor_name:
        type: string
      executor_rating:
        type: number
      executor_username:
        description: Executor info (only for detailed job view)
        type: string
      files:
        description: Files
        items:
          $ref: '#/definitions/models.JobFile'
        type: array
      hoisting:
        type: boolean
      id:
        type: integer
      inventory_list:
        type: boolean
      job_status:
        type: string
      job_type:
        description: Job details
        type: string
      number_of_bedrooms:
        type: string
      packing_boxes:
        description: Additional services
        type: boolean
      payment_amount:
        type: number
      pickup_address:
        description: Pickup location
        type: string
      pickup_building_type:
        type: string
      pickup_city:
        type: string
      pickup_date:
        description: Schedule
        type: string
      pickup_floor:
        type: integer
      pickup_state:
        type: string
      pickup_time_from:
        type: string
      pickup_time_to:
        type: string
      pickup_walk_distance:
        type: string
      truck_size:
        type: string
      updated_at:
        type: string
      volume_cu_ft:
        type: number
      weight_lbs:
        description: Load details
        type: number
    type: object
  models.JobFile:
    properties:
      content_type:
        type: string
      file_id:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        description: verification_document or work_photo
        type: string
      file_url:
        type: string
      id:
        type: integer
      job_id:
        type: integer
      uploaded_at:
        type: string
    type: object
  models.JobFilterOptions:
    properties:
      date_range:
        properties:
          max:
            description: YYYY-MM-DD
            type: string
          min:
            description: YYYY-MM-DD
            type: string
        type: object
      delivery_locations:
        items:
          $ref: '#/definitions/models.LocationOption'
        type: array
      max_distance:
        type: number
      number_of_bedrooms:
        items:
          type: string
        type: array
      payout_range:
        properties:
          max:
            type: number
          min:
            type: number
        type: object
      pickup_locations:
        items:
          $ref: '#/definitions/models.LocationOption'
        type: array
      truck_sizes:
        items:
          type: string
        type: array
    type: object
  models.JobManagementInfo:
    properties:
      date:
        type: string
      from:
        type: string
      id:
        type: integer
      payout:
        type: number
      size:
        type: string
      status:
        type: string
      to:
        type: string
    type: object
  models.JobsStats:
    properties:
      active_jobs_count:
        type: integer
      new_jobs_this_week:
        type: integer
      status_distribution:
        additionalProperties:
          type: integer
        type: object
    type: object
  models.LocationOption:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  models.Notification:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.NotificationAction'
        type: array
      chat_id:
        type: integer
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      job_id:
        type: integer
      message:
        type: string
      metadata:
        additionalProperties: true
        type: object
      priority:
        $ref: '#/definitions/models.NotificationPriority'
      read_at:
        type: string
      related_user_id:
        type: integer
      title:
        type: string
      type:
        $ref: '#/definitions/models.NotificationType'
      user_id:
        type: integer
    type: object
  models.NotificationAction:
    properties:
      action:
        description: 'action type: ''view_job'', ''open_chat'', ''mark_read'', etc.'
        type: string
      label:
        type: string
      primary:
        description: is this the primary action
        type: boolean
      url:
        description: URL to navigate to
        type: string
    type: object
  models.NotificationListResponse:
    properties:
      notifications:
        items:
          $ref: '#/definitions/models.Notification'
        type: array
      pagination:
        properties:
          has_next:
            type: boolean
          has_prev:
            type: boolean
          limit:
            type: integer
          offset:
            type: integer
        type: object
      total:
        type: integer
      unread:
        type: integer
    type: object
  models.NotificationPriority:
    enum:
    - low
    - normal
    - high
    - urgent
    type: string
    x-enum-varnames:
    - NotificationPriorityLow
    - NotificationPriorityNormal
    - NotificationPriorityHigh
    - NotificationPriorityUrgent
  models.NotificationStats:
    properties:
      by_type:
        additionalProperties:
          type: integer
        type: object
      total:
        type: integer
      unread:
        type: integer
    type: object
  models.NotificationType:
    enum:
    - job_application
    - job_update
    - job_claimed
    - job_completed
    - payment
    - document_upload
    - new_job
    - review
    - message
    - system
    type: string
    x-enum-comments:
      NotificationTypeDocumentUpload: Document uploaded
      NotificationTypeJobApplication: Someone applied to your job
      NotificationTypeJobClaimed: Your job was claimed
      NotificationTypeJobCompleted: Job was completed
      NotificationTypeJobUpdate: Job status changed
      NotificationTypeMessage: New chat message
      NotificationTypeNewJob: New job matching criteria
      NotificationTypePayment: Payment related
      NotificationTypeReview: New review received
      NotificationTypeSystem: System announcements
    x-enum-descriptions:
    - Someone applied to your job
    - Job status changed
    - Your job was claimed
    - Job was completed
    - Payment related
    - Document uploaded
    - New job matching criteria
    - New review received
    - New chat message
    - System announcements
    x-enum-varnames:
    - NotificationTypeJobApplication
    - NotificationTypeJobUpdate
    - NotificationTypeJobClaimed
    - NotificationTypeJobCompleted
    - NotificationTypePayment
    - NotificationTypeDocumentUpload
    - NotificationTypeNewJob
    - NotificationTypeReview
    - NotificationTypeMessage
    - NotificationTypeSystem
  models.PaginatedJobsResponse:
    properties:
      jobs:
        items:
          $ref: '#/definitions/models.JobManagementInfo'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  models.PaginatedUsersResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserCompanyInfo'
        type: array
    type: object
  models.Payment:
    properties:
      amount_cents:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      failure_reason:
        type: string
      id:
        type: integer
      job_id:
        type: integer
      status:
        type: string
      stripe_customer_id:
        type: string
      stripe_payment_intent_id:
        type: string
      stripe_payment_method_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.PaymentMethodResponse:
    properties:
      card_brand:
        type: string
      card_exp_month:
        type: integer
      card_exp_year:
        type: integer
      card_last4:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
    type: object
  models.PlatformAnalytics:
    properties:
      busiest_routes:
        items:
          $ref: '#/definitions/models.BusyRoute'
        type: array
      top_companies:
        items:
          $ref: '#/definitions/models.TopCompany'
        type: array
    type: object
  models.ResetPasswordRequest:
    properties:
      code:
        type: string
      email:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - code
    - email
    - new_password
    type: object
  models.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      job_id:
        type: integer
      rating:
        description: 1-5 звезд
        type: integer
      reviewee_id:
        description: исполнитель
        type: integer
      reviewer_id:
        description: заказчик
        type: integer
      updated_at:
        type: string
    type: object
  models.SignInRequest:
    properties:
      identifier:
        example: Sabalaq
        type: string
      password:
        example: Lineage6_
        type: string
    type: object
  models.SignUpRequest:
    properties:
      email:
        example: zhanseriknurym@gmail.com
        type: string
      password:
        example: Lineage6_
        type: string
      username:
        example: Sabalaq
        type: string
    type: object
  models.State:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.SystemSettings:
    properties:
      commission_rate:
        type: number
      id:
        type: integer
      job_expiration_days:
        type: integer
      minimum_payout:
        type: integer
      new_user_approval:
        type: string
    type: object
  models.TopCompany:
    properties:
      company_name:
        type: string
      jobs_count:
        type: integer
    type: object
  models.TruckSwagger:
    properties:
      climate_control:
        type: boolean
      color:
        type: string
      created_at:
        type: string
      furniture_pads:
        type: boolean
      height:
        type: number
      id:
        type: integer
      length:
        type: number
      license_plate:
        type: string
      liftgate:
        type: boolean
      make:
        type: string
      max_weight:
        type: number
      model:
        type: string
      pallet_jack:
        type: boolean
      photo_urls:
        items:
          type: string
        type: array
      refrigerated:
        type: boolean
      security_system:
        type: boolean
      truck_name:
        type: string
      truck_type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      width:
        type: number
      year:
        type: integer
    type: object
  models.UploadPhotoResponse:
    properties:
      message:
        type: string
      profile_photo_id:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      profile_photo_id:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserCompanyInfo:
    properties:
      company_name:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      status:
        type: string
      trucks_number:
        type: integer
    type: object
  models.UserFullInfo:
    properties:
      company:
        $ref: '#/definitions/models.Company'
      jobs:
        items:
          $ref: '#/definitions/models.Job'
        type: array
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      trucks:
        items:
          $ref: '#/definitions/models.TruckSwagger'
        type: array
      user:
        $ref: '#/definitions/models.User'
      verification:
        items:
          $ref: '#/definitions/models.VerificationFile'
        type: array
    type: object
  models.UserRatingStats:
    properties:
      average_rating:
        type: number
      five_stars:
        type: integer
      four_stars:
        type: integer
      one_star:
        type: integer
      three_stars:
        type: integer
      total_reviews:
        type: integer
      two_stars:
        type: integer
      user_id:
        type: integer
    type: object
  models.UserSessionResponse:
    properties:
      created_at:
        type: string
      device_info:
        description: Formatted as "Browser on OS"
        type: string
      id:
        type: integer
      ip_address:
        type: string
      is_current:
        type: boolean
      last_activity:
        type: string
      location_info:
        description: Formatted as "City, Region"
        type: string
    type: object
  models.UserWorkStats:
    properties:
      completed_jobs:
        type: integer
      earnings:
        type: number
      upcoming_jobs:
        type: integer
    type: object
  models.VerificationFile:
    properties:
      fileType:
        type: string
      objectName:
        type: string
      status:
        type: string
      url:
        type: string
    type: object
  models.VerifyResetCodeRequest:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  models.VerifyResetCodeResponse:
    properties:
      message:
        type: string
      valid:
        type: boolean
    type: object
  user.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
info:
  contact: {}
  description: API для приложения MoveShare
  title: MoveShare API
  version: "1.0"
paths:
  /admin/analytics:
    get:
      description: Gets platform analytics including top companies and busiest routes
      parameters:
      - default: 30
        description: Number of days to look back
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlatformAnalytics'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get platform analytics
      tags:
      - Admin
  /admin/conversations/count:
    get:
      description: Gets the total number of chat conversations in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get total chat conversation count
      tags:
      - Admin
  /admin/jobs:
    get:
      description: Gets a paginated list of jobs with limit, offset and optional status
        filter
      parameters:
      - default: 10
        description: Limit number of jobs returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by job status. Single status or comma-separated multiple
          (claimed, active, pending, canceled, completed)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedJobsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of jobs
      tags:
      - Admin
  /admin/jobs/active/count:
    get:
      description: Gets the total number of active jobs (not completed) in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get active jobs count
      tags:
      - Admin
  /admin/settings:
    get:
      description: Gets the current system settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SystemSettings'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get system settings
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Updates the system settings
      parameters:
      - description: System settings
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.SystemSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SystemSettings'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update system settings
      tags:
      - Admin
  /admin/user/{userID}/full-info:
    get:
      description: Gets complete user information including company, trucks, jobs,
        reviews, payments, and verification
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserFullInfo'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get full user information
      tags:
      - Admin
  /admin/user/{userID}/status:
    patch:
      consumes:
      - application/json
      description: Changes the status of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: New status for the user
        enum:
        - Verified Mover
        - Banned
        - On waiting
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user status
      tags:
      - Admin
  /admin/users:
    get:
      description: Gets a paginated list of users with limit and offset
      parameters:
      - default: 10
        description: Limit number of users returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedUsersResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - Admin
  /admin/users/count:
    get:
      description: Gets the total number of users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get total user count
      tags:
      - Admin
  /admin/users/pending/count:
    get:
      description: Gets the total number of users with "On Waiting" status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get pending users count
      tags:
      - Admin
  /admin/verification/file/{fileID}/status:
    patch:
      description: Администратор изменяет статус конкретного файла верификации пользователя
      parameters:
      - description: ID файла
        in: path
        name: fileID
        required: true
        type: integer
      - description: Новый статус (например, approved, rejected)
        enum:
        - Approved
        - Rejected
        - Pending
        in: query
        name: status
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      summary: Изменить статус файла верификации
      tags:
      - Admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.ChangePasswordResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Current password is incorrect
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /auth/logout:
    post:
      description: Terminates the current user session
      produces:
      - application/json
      responses:
        "200":
          description: success message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Validates refresh token and returns a new access token.
      parameters:
      - description: Refresh token payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user_id and access_token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /auth/sign-in:
    post:
      description: Authenticates user with email/username and password, returns JWT
        tokens
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignInRequest'
      responses: {}
      summary: Authenticate user
      tags:
      - Auth
  /auth/sign-up:
    post:
      description: Creates a new user account with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      responses: {}
      summary: Register a new user
      tags:
      - Auth
  /chats:
    get:
      description: Returns a list of all chats for the authenticated user with preview
        of last message
      parameters:
      - default: 20
        description: Limit number of chats returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user chats
      tags:
      - Chat
  /chats/:
    post:
      consumes:
      - application/json
      description: Creates a new chat conversation between two users for a specific
        job
      parameters:
      - description: Chat creation data
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/chat.CreateChatRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/chat.CreateChatResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new chat
      tags:
      - Chat
  /chats/{chatId}/mark-read:
    post:
      description: Mark all unread messages in a chat as read for the current user
      parameters:
      - description: Chat ID
        in: path
        name: chatId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark messages as read
      tags:
      - Chat
  /chats/{chatId}/messages:
    get:
      description: Returns messages for a specific chat with pagination
      parameters:
      - description: Chat ID
        in: path
        name: chatId
        required: true
        type: integer
      - default: 30
        description: Limit number of messages returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: desc
        description: Order of messages
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get chat messages
      tags:
      - Chat
    post:
      consumes:
      - application/json
      description: Sends a new message to the specified chat
      parameters:
      - description: Chat ID
        in: path
        name: chatId
        required: true
        type: integer
      - description: Message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/chat.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/chat.SendMessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send message to chat
      tags:
      - Chat
  /chats/{chatId}/ws:
    get:
      description: Establishes WebSocket connection for real-time chat messaging
      parameters:
      - description: Chat ID
        in: path
        name: chatId
        required: true
        type: integer
      - description: JWT token for authentication
        in: query
        name: token
        required: true
        type: string
      responses: {}
      summary: WebSocket connection for chat
      tags:
      - Chat
  /commission-rate:
    get:
      description: Gets the current platform commission rate that users can see
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              format: float64
              type: number
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get platform commission rate
      tags:
      - System
  /company/:
    get:
      description: Возвращает компанию, связанную с текущим пользователем
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompanyResponse'
      security:
      - BearerAuth: []
      summary: Получить информацию о компании
      tags:
      - Company
    put:
      consumes:
      - application/json
      description: Частично обновляет компанию, связанную с текущим пользователем
      parameters:
      - description: Данные для обновления компании
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Обновить информацию о компании
      tags:
      - Company
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset code to user's email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - Auth
  /jobs/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific job by its ID with contractor information
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job details with contractor username, status and average rating
          schema:
            $ref: '#/definitions/models.Job'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Job not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get job by ID
      tags:
      - Jobs
  /jobs/{id}/files:
    get:
      consumes:
      - application/json
      description: Retrieves all files uploaded for a specific job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job files
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Job not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get files for a specific job
      tags:
      - Jobs
  /jobs/{id}/files/by-type:
    get:
      consumes:
      - application/json
      description: Retrieves files uploaded for a specific job filtered by file type
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: File type
        enum:
        - verification_document
        - work_photo
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Job files by type
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Job not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get files for a specific job by type
      tags:
      - Jobs
  /jobs/available:
    get:
      consumes:
      - application/json
      description: Retrieves available jobs with optional filtering and pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Number of bedrooms filter
        in: query
        name: number_of_bedrooms
        type: string
      - description: Pickup address filter
        in: query
        name: origin
        type: string
      - description: Delivery address filter
        in: query
        name: destination
        type: string
      - description: Maximum distance in miles
        in: query
        name: max_distance
        type: number
      - description: Start date filter (YYYY-MM-DD)
        in: query
        name: pickup_date_start
        type: string
      - description: End date filter (YYYY-MM-DD)
        in: query
        name: pickup_date_end
        type: string
      - description: Truck size filter (space-separated for multiple)
        example: '"Small Large"'
        in: query
        name: truck_size
        type: string
      - description: Minimum payout amount
        in: query
        name: payout_min
        type: number
      - description: Maximum payout amount
        in: query
        name: payout_max
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Available jobs with pagination and applied filters
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get available jobs
      tags:
      - Jobs
  /jobs/cancel-jobs:
    post:
      consumes:
      - application/json
      description: Cancels multiple jobs by changing their status to 'cancelled'
      parameters:
      - description: Job IDs to cancel
        in: body
        name: cancel
        required: true
        schema:
          $ref: '#/definitions/models.CancelJobsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Jobs cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cancel multiple jobs
      tags:
      - Jobs
  /jobs/claim-job/{id}:
    post:
      consumes:
      - application/json
      description: Allows a user to claim an available job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job claimed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Claim a job
      tags:
      - Jobs
  /jobs/claimed:
    get:
      consumes:
      - application/json
      description: Retrieves jobs claimed by the authenticated user with pagination
        and chat creation status
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Claimed jobs with pagination and chat status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get claimed jobs
      tags:
      - Jobs
  /jobs/delete-job/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a job posting (only by job owner)
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a job
      tags:
      - Jobs
  /jobs/export:
    post:
      consumes:
      - application/json
      description: Exports specified jobs to CSV format for download
      parameters:
      - description: Job IDs to export
        in: body
        name: export
        required: true
        schema:
          $ref: '#/definitions/models.ExportJobsRequest'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: CSV file with job data
          schema:
            type: file
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No jobs found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Export jobs to CSV
      tags:
      - Jobs
  /jobs/filter-options/:
    get:
      description: Gets available filter options for jobs (unique values)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobFilterOptions'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get filter options
      tags:
      - Jobs
  /jobs/mark-job-completed/{id}:
    post:
      consumes:
      - application/json
      description: Marks a job as completed by the user who claimed it
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job marked as completed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark job as completed
      tags:
      - Jobs
  /jobs/my-jobs:
    get:
      consumes:
      - application/json
      description: Retrieves jobs created by the authenticated user with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User's jobs with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get my jobs
      tags:
      - Jobs
  /jobs/pending-jobs:
    get:
      consumes:
      - application/json
      description: Retrieves jobs that the authenticated user has claimed but not
        completed, sorted by pickup date (closest first)
      parameters:
      - default: 10
        description: Items limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pending jobs
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get pending jobs
      tags:
      - Jobs
  /jobs/post-new-job:
    post:
      consumes:
      - application/json
      description: Creates a new job posting for moving services with required payment
        processing
      parameters:
      - description: Job creation data with payment
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/models.CreateJobWithPaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Job created successfully with payment processed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "402":
          description: Payment required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new job with payment
      tags:
      - Jobs
  /jobs/stats:
    get:
      consumes:
      - application/json
      description: Retrieves job statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Job statistics
          schema:
            $ref: '#/definitions/models.JobsStats'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get job statistics
      tags:
      - Jobs
  /jobs/today-schedule:
    get:
      consumes:
      - application/json
      description: Retrieves today's jobs for the authenticated user (as executor)
        sorted by pickup time
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Today's schedule jobs with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get today's schedule jobs
      tags:
      - Jobs
  /jobs/upload-files/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Uploads files for a job that the user has claimed and changes status
        to pending
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Files uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - job not claimed by user
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload files for a claimed job
      tags:
      - Jobs
  /jobs/upload-verification-documents/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Uploads verification documents for a job that the user has claimed
        and changes status to pending
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Verification documents to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Documents uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - job not claimed by user
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload verification documents for a claimed job
      tags:
      - Jobs
  /jobs/upload-work-photos/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Uploads work photos for a job that the user has claimed and changes
        status to pending
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Work photos to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Photos uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - job not claimed by user
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload work photos for a claimed job
      tags:
      - Jobs
  /jobs/user-work-stats:
    get:
      consumes:
      - application/json
      description: Retrieves work statistics for the authenticated user (jobs they
        applied to)
      produces:
      - application/json
      responses:
        "200":
          description: User work statistics
          schema:
            $ref: '#/definitions/models.UserWorkStats'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user work statistics
      tags:
      - Jobs
  /location/cities:
    get:
      consumes:
      - application/json
      description: Retrieves a list of cities, optionally filtered by state
      parameters:
      - description: State ID to filter cities
        in: query
        name: state_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of cities
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.CityWithState'
              type: array
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get cities
      tags:
      - Location
  /location/states:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available states
      produces:
      - application/json
      responses:
        "200":
          description: List of states
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.State'
              type: array
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all states
      tags:
      - Location
  /notifications:
    delete:
      description: Deletes all notifications for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete all notifications
      tags:
      - Notifications
    get:
      description: Returns a paginated list of notifications for the authenticated
        user
      parameters:
      - default: 20
        description: Limit number of notifications returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by notification type
        enum:
        - job_application
        - job_update
        - payment
        - document_upload
        - new_job
        - review
        - message
        - system
        in: query
        name: type
        type: string
      - default: false
        description: Show only unread notifications
        in: query
        name: unread
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - Notifications
  /notifications/{id}:
    delete:
      description: Deletes a specific notification for the authenticated user
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete notification
      tags:
      - Notifications
  /notifications/{id}/read:
    post:
      description: Marks a specific notification as read for the authenticated user
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - Notifications
  /notifications/read-all:
    post:
      description: Marks all notifications as read for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark all notifications as read
      tags:
      - Notifications
  /notifications/stats:
    get:
      description: Returns notification statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationStats'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get notification statistics
      tags:
      - Notifications
  /notifications/test:
    post:
      description: Sends a test notification to the current user (for development)
      parameters:
      - default: system
        description: Notification type
        enum:
        - message
        - job
        - system
        in: query
        name: type
        type: string
      - default: Test notification
        description: Notification message
        in: query
        name: message
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send test notification
      tags:
      - Notifications
  /notifications/ws:
    get:
      description: Establishes WebSocket connection for real-time notifications
      parameters:
      - description: JWT token for authentication
        in: query
        name: token
        required: true
        type: string
      responses: {}
      summary: WebSocket connection for notifications
      tags:
      - Notifications
  /payment/cards:
    get:
      consumes:
      - application/json
      description: Gets all active payment cards for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user payment cards
      tags:
      - Payment
    post:
      consumes:
      - application/json
      description: Adds a new payment card for the authenticated user using Stripe
        Payment Method
      parameters:
      - description: Payment method data
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/models.AddCardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AddCardResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a payment card
      tags:
      - Payment
  /payment/cards/{cardId}:
    delete:
      consumes:
      - application/json
      description: Deletes a payment card for the authenticated user
      parameters:
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a payment card
      tags:
      - Payment
  /payment/cards/{cardId}/default:
    patch:
      consumes:
      - application/json
      description: Sets a payment card as the default for the authenticated user
      parameters:
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Set default payment card
      tags:
      - Payment
  /payment/confirm-payment:
    post:
      consumes:
      - application/json
      description: Confirms a payment intent after user completes 3D Secure or other
        authentication
      parameters:
      - description: Payment confirmation data
        in: body
        name: confirmation
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ConfirmPaymentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Confirm a payment
      tags:
      - Payment
  /payment/create-intent:
    post:
      consumes:
      - application/json
      description: Creates a payment intent for a job using user's saved card
      parameters:
      - description: Payment data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreatePaymentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a payment
      tags:
      - Payment
  /payment/history:
    get:
      consumes:
      - application/json
      description: Gets paginated payment history for the authenticated user
      parameters:
      - default: 10
        description: Limit number of payments returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get payment history
      tags:
      - Payment
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using email, code and new password
      parameters:
      - description: Reset password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset password with code
      tags:
      - Auth
  /reviews:
    post:
      consumes:
      - application/json
      description: Creates a new review for a completed job
      parameters:
      - description: Review creation data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Review created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - Reviews
  /reviews/average/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves the average rating and total review count for a specific
        user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User average rating and review count
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user average rating
      tags:
      - Reviews
  /reviews/job/{id}/check:
    get:
      consumes:
      - application/json
      description: Check if the current user has already submitted a review for the
        specified job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Review existence check result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Check if review exists for job
      tags:
      - Reviews
  /reviews/stats/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed rating statistics for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User rating statistics
          schema:
            additionalProperties:
              $ref: '#/definitions/models.UserRatingStats'
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user rating statistics
      tags:
      - Reviews
  /reviews/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves reviews for a specific user with pagination
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User reviews with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user reviews
      tags:
      - Reviews
  /trucks/:
    get:
      description: Retrieves all trucks associated with the authenticated user.
      responses: {}
      security:
      - BearerAuth: []
      summary: Get trucks for the authenticated user
      tags:
      - Trucks
    post:
      consumes:
      - multipart/form-data
      description: Creates a truck associated with the authenticated user and uploads
        photos.
      parameters:
      - description: Truck Name
        in: formData
        name: truck_name
        required: true
        type: string
      - description: License Plate
        in: formData
        name: license_plate
        required: true
        type: string
      - description: Make
        in: formData
        name: make
        required: true
        type: string
      - description: Model
        in: formData
        name: model
        required: true
        type: string
      - description: Year
        in: formData
        name: year
        required: true
        type: integer
      - description: Color
        in: formData
        name: color
        required: true
        type: string
      - description: Length (ft)
        in: formData
        name: length
        required: true
        type: number
      - description: Width (ft)
        in: formData
        name: width
        required: true
        type: number
      - description: Height (ft)
        in: formData
        name: height
        required: true
        type: number
      - description: Max Weight (lbs)
        in: formData
        name: max_weight
        required: true
        type: number
      - description: Truck Type
        enum:
        - Small
        - Medium
        - Large
        in: formData
        name: truck_type
        required: true
        type: string
      - description: Climate Control
        in: formData
        name: climate_control
        type: boolean
      - description: Liftgate
        in: formData
        name: liftgate
        type: boolean
      - description: Pallet Jack
        in: formData
        name: pallet_jack
        type: boolean
      - description: Security System
        in: formData
        name: security_system
        type: boolean
      - description: Refrigerated
        in: formData
        name: refrigerated
        type: boolean
      - description: Furniture Pads
        in: formData
        name: furniture_pads
        type: boolean
      - collectionFormat: csv
        description: Truck photo(s)
        in: formData
        items:
          type: file
        name: photo
        type: array
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new truck
      tags:
      - Trucks
  /trucks/{truckId}/:
    delete:
      description: Deletes a truck by its ID
      parameters:
      - description: Truck ID
        in: path
        name: truckId
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a truck
      tags:
      - Trucks
    get:
      description: Get a truck by its ID
      parameters:
      - description: Truck ID
        in: path
        name: truckId
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Get truck by ID
      tags:
      - Trucks
  /user/active-sessions:
    get:
      description: Returns all active sessions for the current user
      produces:
      - application/json
      responses:
        "200":
          description: active sessions
          schema:
            $ref: '#/definitions/models.ActiveSessionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's active sessions
      tags:
      - Session
  /user/my-profile:
    get:
      description: Returns the profile information of the currently authenticated
        user including updated_at
      produces:
      - application/json
      responses:
        "200":
          description: user profile
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - User
  /user/my-status:
    get:
      description: Returns the status of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: user status
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user status
      tags:
      - User
  /user/profile-photo:
    delete:
      consumes:
      - application/json
      description: Deletes the authenticated user's profile photo
      produces:
      - application/json
      responses:
        "200":
          description: Photo deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No profile photo to delete
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete profile photo
      tags:
      - User
  /user/profile-photo/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a presigned URL for a user's profile photo
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Profile photo URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User or photo not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user profile photo
      tags:
      - User
  /user/sessions/{session_id}/terminate:
    delete:
      description: Terminates a specific session by ID
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Terminate a specific session
      tags:
      - Session
  /user/sessions/terminate-all:
    delete:
      description: Terminates all user sessions except the current one
      produces:
      - application/json
      responses:
        "200":
          description: success message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Terminate all sessions except current
      tags:
      - Session
  /user/upload-profile-photo:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a profile photo for the authenticated user (max 5MB, JPG/JPEG/PNG/GIF
        only)
      parameters:
      - description: Profile photo file (max 5MB)
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Photo uploaded successfully
          schema:
            $ref: '#/definitions/models.UploadPhotoResponse'
        "400":
          description: Bad request - invalid file type or size
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload profile photo
      tags:
      - User
  /verification/:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a verification file associated with the authenticated user.
      parameters:
      - description: File Type
        enum:
        - MC License
        - DOT Certificate
        - Insurance Certificate
        - Business License
        in: formData
        name: fileType
        required: true
        type: string
      - description: Verification file
        in: formData
        name: file
        required: true
        type: file
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new verification file
      tags:
      - Verification
  /verification/files:
    get:
      description: Возвращает список файлов, загруженных пользователем для верификации
      produces:
      - application/json
      responses:
        "200":
          description: Список файлов
          schema:
            items:
              $ref: '#/definitions/models.VerificationFile'
            type: array
      security:
      - BearerAuth: []
      summary: Получить файлы верификации пользователя
      tags:
      - Verification
  /verify-reset-code:
    post:
      consumes:
      - application/json
      description: Verify if the provided reset code is valid and not expired
      parameters:
      - description: Email and code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyResetCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VerifyResetCodeResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.VerifyResetCodeResponse'
      summary: Verify password reset code
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: 'Enter JWT token in format: Bearer {your_token_here}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
